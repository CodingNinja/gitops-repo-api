// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/diff-api.proto

package apiconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	api "github.com/codingninja/gitops-repo-api/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DiffApiName is the fully-qualified name of the DiffApi service.
	DiffApiName = "apipb.DiffApi"
)

// DiffApiClient is a client for the apipb.DiffApi service.
type DiffApiClient interface {
	Diff(context.Context, *connect_go.Request[api.DiffRequest]) (*connect_go.Response[api.DiffResponse], error)
}

// NewDiffApiClient constructs a client for the apipb.DiffApi service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDiffApiClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DiffApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &diffApiClient{
		diff: connect_go.NewClient[api.DiffRequest, api.DiffResponse](
			httpClient,
			baseURL+"/apipb.DiffApi/Diff",
			opts...,
		),
	}
}

// diffApiClient implements DiffApiClient.
type diffApiClient struct {
	diff *connect_go.Client[api.DiffRequest, api.DiffResponse]
}

// Diff calls apipb.DiffApi.Diff.
func (c *diffApiClient) Diff(ctx context.Context, req *connect_go.Request[api.DiffRequest]) (*connect_go.Response[api.DiffResponse], error) {
	return c.diff.CallUnary(ctx, req)
}

// DiffApiHandler is an implementation of the apipb.DiffApi service.
type DiffApiHandler interface {
	Diff(context.Context, *connect_go.Request[api.DiffRequest]) (*connect_go.Response[api.DiffResponse], error)
}

// NewDiffApiHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDiffApiHandler(svc DiffApiHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/apipb.DiffApi/Diff", connect_go.NewUnaryHandler(
		"/apipb.DiffApi/Diff",
		svc.Diff,
		opts...,
	))
	return "/apipb.DiffApi/", mux
}

// UnimplementedDiffApiHandler returns CodeUnimplemented from all methods.
type UnimplementedDiffApiHandler struct{}

func (UnimplementedDiffApiHandler) Diff(context.Context, *connect_go.Request[api.DiffRequest]) (*connect_go.Response[api.DiffResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("apipb.DiffApi.Diff is not implemented"))
}
